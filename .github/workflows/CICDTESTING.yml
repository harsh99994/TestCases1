# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Unit and UI Tests
        run: /usr/bin/xcodebuild test -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -destination 'platform=iOS Simulator,name=iPhone 14'
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Ecco App
        run: xcodebuild -scheme "EccoShoes" clean archive -archivePath "Actions" -configuration "PRODUCTION"
      - name: Export IPA
        env: 
         EXPORT_PLIST: ${{ secrets.IOS_EXPORT_PRODUCTION}}
        run: |
         #crete export options
         EXPORT_PLIST_PATH=$RUNNER_TEMP/ExportOptions.plist
         echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH
         xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/Actions.xcarchive -exportOptions Plist $EXPORT_PLIST_PATH -exportPath $RUNNER_TEMP/export
      - name: Decode auth. api key file and save it
        env:
         API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        run: |
         ls ~/private_keys
         echo -n "$API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
         echo "After saving: "
         ls ~/private_keys
      - name: Upload file to test flight using CLI
        run: |
         echo "Starting upload. "
         ls ~/private_keys
         xcrun altool --validate-app -f /Users/cobemacmini/ios-runner/_work/_temp/export/EccoShoes.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID
         xcrun altool --upload-app -f /Users/cobemacmini/ios-runner/_work/_temp/export/EccoShoes.ipa -t ios --apiKey "${{ secrets.APPSTORE_API_KEY_ID}
